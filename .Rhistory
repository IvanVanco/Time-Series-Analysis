#Import data from MS SQL Server to data frame using ODBC connection - RODBC
install.packages("RODBC")
#install.packages("RODBC")
library(RODBC)
#creating connectiuon string
connection <- odbcDriverConnect(connection = "Driver={SQL Server Native Client 11.0};server=localhost;database=AlgrossoAnalitycs;trusted_connection=yes;")
?RODBC
#getting data
data <- sqlFetch(connection, "dbo.ProdajaPoMesecima", colnames = FALSE, rownames = TRUE)
View(data)
View(data)
rm(list = ls())
#install.packages("RODBC")
library(RODBC)
#creating connectiuon string
connection <- odbcDriverConnect(connection = "Driver={SQL Server Native Client 11.0};server=localhost;database=AlgrossoAnalitycs;trusted_connection=yes;")
#getting data from View
data <- sqlFetch(connection, "dbo.ProdajaPoMesecima", colnames = FALSE, rownames = TRUE)
View(data)
###################
#2.  Forecasting
###################
library(fpp2)
###################
#2.  Forecasting
###################
install.packages("fpp2")
###################
#2.  Forecasting
###################
#install.packages("fpp2")
library(fpp2)
View(data)
#deckare data as time series data
tdata <- ts(data[,3], start = c(2017,1), frequency = 12)
autoplot(tdata) + ggtitle("Neki")+
ylab("Y labela")
#removing last month from data frame, which is incomplete
data <- head(data, -1)
View(data)
View(data)
#declare data as time series data
tdata <- ts(data[,3], start = c(2017,1), frequency = 12)
autoplot(tdata) + ggtitle("Neki")+
ylab("Y labela")
View(data)
View(data)
#dividing revenue by 1000 for tracking convinience in plots
data <- data[3,]/1000
#getting data from View
data <- sqlFetch(connection, "dbo.ProdajaPoMesecima", colnames = FALSE, rownames = TRUE)
#removing last month from data frame, which is incomplete
data <- head(data, -1)
#dividing revenue by 1000 for tracking convinience in plots
data <- data[,3]/1000
#getting data from View
data <- sqlFetch(connection, "dbo.ProdajaPoMesecima", colnames = FALSE, rownames = TRUE)
#removing last month from data frame, which is incomplete
data <- head(data, -1)
View(data)
#dividing revenue by 1000 for tracking convinience in plots
data <- data[,3]
#dividing revenue by 1000 for tracking convinience in plots
data <- as.data.frame(data[,3])
#getting data from View
data <- sqlFetch(connection, "dbo.ProdajaPoMesecima", colnames = FALSE, rownames = TRUE)
#removing last month from data frame, which is incomplete
data <- head(data, -1)
#dividing revenue by 1000 for tracking convinience in plots
data[,3] <- data[,3]/1000
View(data)
#dividing revenue by 1000 for tracking convinience in plots
data[,3] <- round(data[,3]/1000, digits = 0)
View(data)
#dividing revenue by 1000 for tracking convinience in plots
data[,3] <- round(data[,3]/1000, digits = 2)
View(data)
#creating connectiuon string
connection <- odbcDriverConnect(connection = "Driver={SQL Server Native Client 11.0};server=localhost;database=AlgrossoAnalitycs;trusted_connection=yes;")
#getting data from View
data <- sqlFetch(connection, "dbo.ProdajaPoMesecima", colnames = FALSE, rownames = TRUE)
#removing last month from data frame, which is incomplete
data <- head(data, -1)
#dividing revenue by 1000 for tracking convinience in plots
data[,3] <- round(data[,3]/1000, digits = 2)
View(data)
#getting data from View
data <- sqlFetch(connection, "dbo.ProdajaPoMesecima", colnames = FALSE, rownames = TRUE)
#removing last month from data frame, which is incomplete
data <- head(data, -1)
#dividing revenue by 1000 for tracking convinience in plots
data[,3] <- round(data[,3]/1000, digits = 0)
View(data)
#declare data as time series data
tdata <- ts(data[,3], start = c(2017,1), frequency = 12)
autoplot(tdata) + ggtitle("Monthly sales revenue")+
ylab("Revenue in thousands")
View(data)
#Take first difference of the data to remove trend
dfdata <- diff(tdata)
+ ylab("Revenue in thousands")
+ ylab("Revenue in thousands")
+ ylab("Revenue in thousands")
autoplot(tdata)
+ ggtitle("Monthly sales revenue")
+ ylab("Revenue in thousands")
+ ggtitle("Monthly sales revenue")+ ylab("Revenue in thousands")
+ ggtitle("Monthly sales revenue")+ylab("Revenue in thousands")
autoplot(tdata) + ggtitle("Monthly sales revenue")+ylab("Revenue in thousands")
autoplot(tdata) +
ggtitle("Monthly sales revenue")+ylab("Revenue in thousands")
autoplot(tdata) +
ggtitle("Monthly sales revenue")+
ylab("Revenue in thousands")
+
ylab("Revenue in thousands")
autoplot(tdata) +
ggtitle("Monthly sales revenue")+
ylab("Revenue in thousands")
autoplot(dfdata) +
ggtitle("Monthly changes in sales revenue")+
ylab("Revenue in thousands")
plot(aggregate(dfdata, FUN = mean))
summary(tdata)
autoplot(tdata) +
ggtitle("Monthly sales revenue")+
ylab("Revenue in thousands")
abline(reg = lm(tdata~time(tdata)))
abline(reg = lm(tdata~time(tdata)))
plot(tdata)
plot(tdata)
plot(tdata)
abline(reg = lm(tdata~time(tdata)))
autoplot(tdata) +
ggtitle("Monthly sales revenue")+
ylab("Revenue in thousands")
plot(tdata)
abline(reg = lm(tdata~time(tdata)))
plot(aggregate(tdata, FUN = mean))
#Seasonal effects
boxplot(tdata~cycle(tdata))
plot(log(tdata))
plot(diff(log(tdata)))
autoplot(tdata) +
ggtitle("Monthly sales revenue")+
ylab("Revenue in thousands")
#install.packages("RODBC")
library(RODBC)
#install.packages("fpp2")
library(fpp2)
autoplot(tdata) +
ggtitle("Monthly sales revenue")+
ylab("Revenue in thousands")
ggseasonplot(diff(tdata))+
ggtitle("Seasonal Plot: Monthly sales revenue")+
ylab("Revenue in thousands")
plot(aggregate(dfdata, FUN = mean))
snaive <- snaive(dfdata)
print(summary(snaive))
checkresiduals(snaive)
#we can use regular data with trend
ets <- ets(tdata)
print(summary(ets))
checkresiduals(ets)
#this will try all posssible combination of arima models
#d=1 - take 1st difference, D=1 - take 1st seasonal diff to get rid of seasonaly effects
#approximation is for faster getting function, but we are only working with 1 time series
#stepwise saves time to try fewer function to fit data
arima <- auto.arima(tdata, d=1, D=1,
stepwise = FALSE,
approximation = FALSE,
trace = TRUE)
print(summary(arima))
checkresiduals(arima)
fcst <- forecast(ets, h = 12)
autoplot(fcst, include = 180)
fcst <- forecast(ets, h = 2)
autoplot(fcst, include = 180)
autoplot(fcst, include = 60)
fcst <- forecast(ets, h = 2)
autoplot(fcst, include = 60)
autoplot(fcst, include = 2)
fcst <- forecast(ets, h = 6)
autoplot(fcst, include = 60)
print(summary(fcst))
#getting data from View
data <- sqlFetch(connection, "dbo.ProdajaPoMesecima", colnames = FALSE, rownames = TRUE)
#creating connectiuon string
connection <- odbcDriverConnect(connection = "Driver={SQL Server Native Client 11.0};server=localhost;database=AlgrossoAnalitycs;trusted_connection=yes;")
#install.packages("fpp2")
library(fpp2)
#install.packages("RODBC")
library(RODBC)
#creating connectiuon string
connection <- odbcDriverConnect(connection = "Driver={SQL Server Native Client 11.0};server=localhost;database=AlgrossoAnalitycs;trusted_connection=yes;")
#getting data from View
data <- sqlFetch(connection, "dbo.ProdajaPoMesecima", colnames = FALSE, rownames = TRUE)
View(data)
View(data)
#removing last month from data frame, which is incomplete
data <- head(data, -1)
#dividing revenue by 1000 for tracking convinience in plots
data[,3] <- round(data[,3]/1000, digits = 0)
#declare data as time series data
tdata <- ts(data[,3], start = c(2017,1), frequency = 12)
summary(tdata)
autoplot(tdata) +
ggtitle("Monthly sales revenue")+
ylab("Revenue in thousands")
#Data has a trend, and we need to transform it to remove it
plot(tdata)
abline(reg = lm(tdata~time(tdata)))
#Seasonal effects- we have highest sales revenue in month of december in every year
boxplot(tdata~cycle(tdata))
#Seasonal effects- we also have same line motions around mid mar
#we are using first difference to remove trend
ggseasonplot(diff(tdata))+
ggtitle("Seasonal Plot: Monthly sales revenue")+
ylab("Revenue in thousands")
#Seasonal effects- we also have same line motions around mid mar
#we are using first difference to remove trend
trend = ma(tdata, order = 12, centre = T)
ggseasonplot(tdata/trend)+
ggtitle("Seasonal Plot: Monthly sales revenue")+
ylab("Revenue in thousands")
#or divide by trend to remove it
dfdata <- tdata/trend
autoplot(dfdata) +
ggtitle("Trend stationary: Monthly changes in sales revenue")+
ylab("Revenue in thousands")
#Data has a trend, and we need to transform it to remove it
plot(tdata)
#Data has a trend, and we need to transform it to remove it
plot(dfdata)
#trend line
trend = lm(tdata~time(tdata))
#Rr divide by trend to remove it, this works fine here
dfdata <- tdata/trend
#trend line
trend <- ma(tdata, order = 12, centre = T)
#Rr divide by trend to remove it, this works fine here
dfdata <- tdata/trend
autoplot(dfdata) +
ggtitle("Trend stationary: Monthly changes in sales revenue")+
ylab("Revenue in thousands")
trend <-  lm(tdata~time(tdata))
#Rr divide by trend to remove it, this works fine here
dfdata <- tdata/trend
#Rr divide by trend to remove it, this works fine here
dfdata <- tdata / trend
#trend line
trend <- ma(tdata, order = 12, centre = T)
#Rr divide by trend to remove it, this works fine here
dfdata <- tdata / trend
plot(dfdata)
autoplot(tdata) +
ggtitle("Monthly sales revenue")+
ylab("Revenue in thousands")
#trend line
trend <- ma(tdata, order = 12, centre = T)
#Rr divide by trend to remove it, this works fine here
dfdata <- tdata / trend
autoplot(dfdata) +
ggtitle("Trend stationary: Monthly changes in sales revenue")+
ylab("Revenue in thousands")
trend <-  lm(tdata~time(tdata))
trend <-  as.ts(lm(tdata~time(tdata)))
trend <- as.ts(trend)
z <-predict(trend)
z <- predict(trend)
trend <-  lm(tdata~time(tdata))
z <- predict(trend)
#Rr divide by trend to remove it, this works fine here
dfdata <- tdata / z
autoplot(dfdata) +
ggtitle("Trend stationary: Monthly changes in sales revenue")+
ylab("Revenue in thousands")
#plot of removed variance from data, not always the case
plot(log(tdata))
#plot of removed variance and trend from data
#data is now fully stacionary
plot(diff(log(tdata)))
#plot of removed variance and trend from data
#data is now fully stacionary
plot(log(tdata)/trend)
#plot of removed variance and trend from data
#data is now fully stacionary
plot(log(tdata/trend))
#plot of removed variance and trend from data
#data is now fully stacionary
plot(log(dfdata))
#Seasonal effects- we also have same line motions around mid mar
#we are using first difference to remove trend
ggseasonplot(tdata/trend)+
ggtitle("Seasonal Plot: Monthly sales revenue")+
ylab("Revenue in thousands")
#trend line
trend <-  predict(lm(tdata~time(tdata)))
#Seasonal effects- we also have same line motions around mid mar
#we are using first difference to remove trend
ggseasonplot(tdata/trend)+
ggtitle("Seasonal Plot: Monthly sales revenue")+
ylab("Revenue in thousands")
autoplot(dfdata) +
ggtitle("Trend stationary: Monthly changes in sales revenue")+
ylab("Revenue in thousands")
snaive <- snaive(dfdata)
print(summary(snaive))
#Residual SD should be as many low as possible- 17182
checkresiduals(snaive)
#we can use regular data with trend
ets <- ets(tdata)
#it picked model ETS(M,A,N)
print(summary(ets))
#we can use regular data with trend
ets <- ets(dfdata)
#it picked model ETS(M,A,N)
print(summary(ets))
#we can use regular data with trend
ets <- ets(tdata)
#it picked model ETS(M,A,N)
print(summary(ets))
#sigma is 0.1837, which is considerbly lower then naive method
checkresiduals(ets)
train <- data[1:33]
train <- tdata[1:33]
test <- tdata[34:39]
#this will try all posssible combination of arima models
#d=1 - take 1st difference, D=1 - take 1st seasonal diff to get rid of seasonaly effects
#approximation is for faster getting function, but we are only working with 1 time series
#stepwise saves time to try fewer function to fit data
arima <- auto.arima(tdata, d=1, D=1,
stepwise = FALSE,
approximation = FALSE,
trace = TRUE)
print(summary(arima))
?arima
?arima
arima <- arima(train, order = c(0L, 1L, 1L),
seasonal = list(order = c(1L, 1L, 0L), period = 12))
summary(arima)
#residual graph
plot(resid(arima))
summary(resid(model))
summary(resid(arima))
sum(resid(model))
sum(resid(arima))
y=forecast(x,6)
y <- forecast(arima, h = 6)
View(y)
#forcasting values as vector
a=c(y$pred[1],y$pred[2],y$pred[3],y$pred[4],y$pred[5],y$pred[6])
#forcasting values as vector
a <- c(y$pred[1],y$pred[2],y$pred[3],y$pred[4],y$pred[5],y$pred[6])
View(snaive)
View(y)
View(y)
#forcasting values as vector
a <- c(y$pred[1],y$pred[2],y$pred[3],y$pred[4],y$pred[5],y$pred[6])
#absolute error per every months
test - abs(a)
#forcasting values as vector
a <- c(y$pred[1],y$pred[2],y$pred[3],y$pred[4],y$pred[5],y$pred[6])
#Mirkovic
#we will forcasting for 6 months on test data
y <- forecast(arima, 6)
#Mirkovic
#we will forcasting for 6 months on test data
forecast(arima, 6)
#Mirkovic
#we will forcasting for 6 months on test data
u <- forecast(arima, 6)
#forcasting values as vector
a <- c(u$pred[1],u$pred[2],u$pred[3],u$pred[4],u$pred[5],u$pred[6])
u$predict[1]
#Mirkovic
#we will forcasting for 6 months on test data
u <- predict(arima, 6)
View(u)
#forcasting values as vector
a <- c(u$pred[1],u$pred[2],u$pred[3],u$pred[4],u$pred[5],u$pred[6])
#install.packages("fpp2")
library(forecast)
#Mirkovic
#we will forcasting for 6 months on test data
u <- forecast(arima, 6)
#Mirkovic
#we will forcasting for 6 months on test data
y <- predict(arima, h = 6)
#forcasting values as vector
fcvektor <- c(y$pred[1],y$pred[2],y$pred[3],y$pred[4],y$pred[5],y$pred[6])
#absolute error per every months
test - abs(fcvektor)
#mean absolut error
mse <-  mean(abs(test-fcvektor))
mse
#mean quadrat error
msqe <- mean((test-fcvektor)^2)
msqe
#absolute error per every months
test - abs(fcvektor)
#Mirkovic
#we will forcasting for 6 months on test data
y <- predict(arima, h = 6)
View(y)
#Mirkovic
#we will forcasting for 6 months on test data
y <- predict(arima, 6)
View(y)
#forcasting values as vector
fcvektor <- c(y$pred[1],y$pred[2],y$pred[3],y$pred[4],y$pred[5],y$pred[6])
#absolute error per every months
test - abs(fcvektor)
#mean absolut error
mse <-  mean(abs(test-fcvektor))
mse
#mean quadrat error
msqe <- mean((test-fcvektor)^2)
msqe
autoplot(dfdata) +
ggtitle("Trend stationary: Monthly changes in sales revenue")+
ylab("Revenue in thousands")
#trend line
trend <-  predict(lm(tdata~time(tdata)))
autoplot(tdata) +
ggtitle("Monthly sales revenue")+
ylab("Revenue in thousands")
#forcasting values as vector
fcvektor <- c(y$pred[1],y$pred[2],y$pred[3],y$pred[4],y$pred[5],y$pred[6])
#absolute error per every months
test - abs(fcvektor)
View(data)
install.packages("RODBC")
install.packages("uroot")
install.packages("fpp2")
